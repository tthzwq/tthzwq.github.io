import{_ as e,c as o,o as c,a4 as l}from"./chunks/framework.IXvbZIHp.js";const u=JSON.parse('{"title":"BFC","description":"","frontmatter":{},"headers":[],"relativePath":"css/bfc.md","filePath":"css/bfc.md","lastUpdated":1710776348000}'),d={name:"css/bfc.md"},a=l('<h1 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h1><h2 id="bfc-的基本概念" tabindex="-1">BFC 的基本概念 <a class="header-anchor" href="#bfc-的基本概念" aria-label="Permalink to &quot;BFC 的基本概念&quot;">​</a></h2><p>BFC(Blcok formatting context) 直译为“区块格式化上下文”，是 Web 页面的可视 CSS 渲染的一部分，是块级盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。。</p><h2 id="bfc-的特性" tabindex="-1">BFC 的特性 <a class="header-anchor" href="#bfc-的特性" aria-label="Permalink to &quot;BFC 的特性&quot;">​</a></h2><ul><li>内部的 Box（块级盒子）会在垂直方向上沿边框一个接一个地放置；</li><li>Box 垂直方向上的<code>margin</code>由 Box 本身的<code>margin</code>决定。属于同一个 BFC 的两个相邻块元素在垂直方向上的 margin 会发生重叠/合并;</li><li>BFC 内部 <code>float</code> box 不会和同级的 BFC 区域重叠；</li><li>BFC 是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也是如此;</li><li>计算 BFC 的高度时，浮动元素也参与计算；</li></ul><h2 id="如何创建-bfc" tabindex="-1">如何创建 BFC <a class="header-anchor" href="#如何创建-bfc" aria-label="Permalink to &quot;如何创建 BFC&quot;">​</a></h2><p>下列方式会创建块格式化上下文：</p><ul><li>文档的根元素（<code>&lt;html&gt;</code>）。</li><li>浮动元素（即 <code>float</code> 值不为 <code>none</code> 的元素）。</li><li>绝对定位元素（<code>position</code> 值为 <code>absolute</code> 或 <code>fixed</code> 的元素）。</li><li>行内块元素（<code>display</code> 值为 <code>inline-block</code> 的元素）。</li><li>表格单元格（<code>display</code> 值为 <code>table-cell</code>，HTML 表格单元格默认值）。</li><li>表格标题（<code>display</code> 值为 <code>table-caption</code>，HTML 表格标题默认值）。</li><li>匿名表格单元格元素（<code>display</code> 值为 <code>table</code>（HTML 表格默认值）、<code>table-row</code>（表格行默认值）、<code>table-row-group</code>（表格体默认值）、<code>table-header-group</code>（表格头部默认值）、<code>table-footer-group</code>（表格尾部默认值）或 <code>inline-table</code>）。</li><li><code>overflow</code> 值不为 <code>visible</code> 或 <code>clip</code> 的块级元素。</li><li><code>display</code> 值为 <code>flow-root</code> 的元素。它可以创建无副作用的 BFC。</li><li><code>contain</code> 值为 <code>layout</code>、<code>content</code> 或 <code>paint</code> 的元素。</li><li>弹性元素（<code>display</code> 值为 <code>flex</code> 或 <code>inline-flex</code> 元素的直接子元素），如果它们本身既不是弹性、网格也不是表格容器。</li><li>网格元素（<code>display</code> 值为 <code>grid</code> 或 <code>inline-grid</code> 元素的直接子元素），如果它们本身既不是弹性、网格也不是表格容器。</li><li>多列容器（<code>column-count</code> 或 <code>column-width</code> 值不为 <code>auto</code>，且含有 <code>column-count: 1</code> 的元素）。</li><li>column-span 值为 all 的元素始终会创建一个新的格式化上下文，即使该元素没有包裹在一个多列容器中</li></ul><p>格式化上下文影响布局，通常，我们会为定位和清除浮动创建新的 BFC，而不是更改布局，因为它将：</p><ul><li>包含内部浮动。</li><li>排除外部浮动。</li><li>阻止外边距重叠。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>弹性/网格容器（<code>display：flex/grid/inline-flex/inline-grid</code>）建立新的弹性/网格格式化上下文，除布局之外，它与区块格式化上下文类似。弹性/网格容器中没有可用的浮动子级，但排除外部浮动和阻止外边距重叠仍然有效。</p></div><h2 id="bfc-的使用场景" tabindex="-1">BFC 的使用场景 <a class="header-anchor" href="#bfc-的使用场景" aria-label="Permalink to &quot;BFC 的使用场景&quot;">​</a></h2><h3 id="包含内部浮动" tabindex="-1">包含内部浮动 <a class="header-anchor" href="#包含内部浮动" aria-label="Permalink to &quot;包含内部浮动&quot;">​</a></h3><p>BFC 使得让浮动内容和周围的内容等高。</p><h3 id="排除外部浮动" tabindex="-1">排除外部浮动 <a class="header-anchor" href="#排除外部浮动" aria-label="Permalink to &quot;排除外部浮动&quot;">​</a></h3>',15),i=[a];function t(n,r,s,h,b,p){return c(),o("div",null,i)}const m=e(d,[["render",t]]);export{u as __pageData,m as default};
