import{_ as t,o as s,c as a,Q as n}from"./chunks/framework.36bc40e2.js";const f=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"css/css.md","filePath":"css/css.md","lastUpdated":1706427897000}'),l={name:"css/css.md"},p=n(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h3 id="css-选择器优先级" tabindex="-1">CSS 选择器优先级 <a class="header-anchor" href="#css-选择器优先级" aria-label="Permalink to &quot;CSS 选择器优先级&quot;">​</a></h3><pre><code>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器。
</code></pre><p>优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：</p><ol><li>如果存在内联样式，那么 A = 1, 否则 A = 0;</li><li>B 的值等于 ID 选择器 出现的次数;</li><li>C 的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数;</li><li>D 的值等于 标签选择器 和 伪元素 出现的总次数 。</li></ol><h3 id="css-伪元素" tabindex="-1">CSS 伪元素 <a class="header-anchor" href="#css-伪元素" aria-label="Permalink to &quot;CSS 伪元素&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>例子描述</th></tr></thead><tbody><tr><td>::after</td><td></td></tr><tr><td>::before</td><td></td></tr><tr><td>::first-letter</td><td>文本的首字符。 <strong>(只能应用于块级元素)</strong></td></tr><tr><td>::first-line</td><td>文本的首行。 <strong>(只能应用于块级元素)</strong></td></tr><tr><td>::selection</td><td>选择用户选择的部分。</td></tr></tbody></table><h3 id="css-伪类" tabindex="-1">CSS 伪类 <a class="header-anchor" href="#css-伪类" aria-label="Permalink to &quot;CSS 伪类&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>示例</th><th>示例说明</th></tr></thead><tbody><tr><td>:checked</td><td>input:checked</td><td>选择所有选中的表单元素</td></tr><tr><td>:disabled</td><td>input:disabled</td><td>选择所有禁用的表单元素</td></tr><tr><td>:empty</td><td>p:empty</td><td>选择所有没有子元素的 p 元素</td></tr><tr><td>:enabled</td><td>input:enabled</td><td>选择所有启用的表单元素</td></tr><tr><td>:first-of-type</td><td>p:first-of-type</td><td>选择的每个 p 元素是其父元素的第一个 p 元素</td></tr><tr><td>:in-range</td><td>input:in-range</td><td>选择元素指定范围内的值</td></tr><tr><td>:invalid</td><td>input:invalid</td><td>选择所有无效的元素</td></tr><tr><td>:last-child</td><td>p:last-child</td><td>选择所有 p 元素的最后一个子元素</td></tr><tr><td>:last-of-type</td><td>p:last-of-type</td><td>选择每个 p 元素是其母元素的最后一个 p 元素</td></tr><tr><td>:not(selector)</td><td>:not(p)</td><td>选择所有 p 以外的元素</td></tr><tr><td>:nth-child(n)</td><td>p:nth-child(2)</td><td>选择所有 p 元素的父元素的第二个子元素</td></tr><tr><td>:nth-last-child(n)</td><td>p:nth-last-child(2)</td><td>选择所有 p 元素倒数的第二个子元素</td></tr><tr><td>:nth-last-of-type(n)</td><td>p:nth-last-of-type(2)</td><td>选择所有 p 元素倒数的第二个为 p 的子元素</td></tr><tr><td>:nth-of-type(n)</td><td>p:nth-of-type(2)</td><td>选择所有 p 元素第二个为 p 的子元素</td></tr><tr><td>:only-of-type</td><td>p:only-of-type</td><td>选择所有仅有一个子元素为 p 的元素</td></tr><tr><td>:only-child</td><td>p:only-child</td><td>选择所有仅有一个子元素的 p 元素</td></tr><tr><td>:optional</td><td>input:optional</td><td>选择没有&quot;required&quot;的元素属性</td></tr><tr><td>:out-of-range</td><td>input:out-of-range</td><td>选择指定范围以外的值的元素属性</td></tr><tr><td>:read-only</td><td>input:read-only</td><td>选择只读属性的元素属性</td></tr><tr><td>:read-write</td><td>input:read-write</td><td>选择没有只读属性的元素属性</td></tr><tr><td>:required</td><td>input:required</td><td>选择有&quot;required&quot;属性指定的元素属性</td></tr><tr><td>:root</td><td>root</td><td>选择文档的根元素</td></tr><tr><td>:target</td><td>#news:target</td><td>选择当前活动#news 元素(点击 URL 包含锚的名字)</td></tr><tr><td>:valid</td><td>input:valid</td><td>选择所有有效值的属性</td></tr><tr><td>:link</td><td>a:link</td><td>选择所有未访问链接</td></tr><tr><td>:visited</td><td>a:visited</td><td>选择所有访问过的链接</td></tr><tr><td>:hover</td><td>a:hover</td><td>把鼠标放在链接上的状态</td></tr><tr><td>:active</td><td>a:active</td><td>选择正在活动链接</td></tr><tr><td>:focus</td><td>input:focus</td><td>选择元素输入后具有焦点</td></tr><tr><td>:first-letter</td><td>p:first-letter</td><td>选择每个 p 元素的第一个字母</td></tr><tr><td>:first-line</td><td>p:first-line</td><td>选择每个 p 元素的第一行</td></tr><tr><td>:first-child</td><td>p:first-child</td><td>选择器匹配属于任意元素的第一个子元素的 p 元素</td></tr><tr><td>:before</td><td>p:before</td><td>在每个 p 元素之前插入内容</td></tr><tr><td>:after</td><td>p:after</td><td>在每个 p 元素之后插入内容</td></tr><tr><td>:lang(language)</td><td>p:lang(it)</td><td>为 p 元素的 lang 属性选择一个开始值</td></tr></tbody></table><h4 id="anchor-伪类" tabindex="-1">anchor 伪类 <a class="header-anchor" href="#anchor-伪类" aria-label="Permalink to &quot;anchor 伪类&quot;">​</a></h4><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">a</span><span style="color:#B392F0;">:link</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 未访问的链接 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#ff0000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#85E89D;">a</span><span style="color:#B392F0;">:visited</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 已访问的链接 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#00ff00</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#85E89D;">a</span><span style="color:#B392F0;">:hover</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 把鼠标放在链接上  */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#ff00ff</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#85E89D;">a</span><span style="color:#B392F0;">:active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 已选中的链接 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* a:active 必须被置于 a:hover 之后，才是有效的 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#0000ff</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">a</span><span style="color:#6F42C1;">:link</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 未访问的链接 */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#ff0000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#22863A;">a</span><span style="color:#6F42C1;">:visited</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 已访问的链接 */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#00ff00</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#22863A;">a</span><span style="color:#6F42C1;">:hover</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 把鼠标放在链接上  */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的 */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#ff00ff</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#22863A;">a</span><span style="color:#6F42C1;">:active</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 已选中的链接 */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* a:active 必须被置于 a:hover 之后，才是有效的 */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#0000ff</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,11),o=[p];function d(e,r,c,i,y,E){return s(),a("div",null,o)}const u=t(l,[["render",d]]);export{f as __pageData,u as default};
