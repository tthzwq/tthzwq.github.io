import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.36bc40e2.js";const d=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"rust/002_data-types.md","filePath":"rust/002_data-types.md","lastUpdated":1706427897000}'),p={name:"rust/002_data-types.md"},o=l(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><h2 id="标量类型-scalar-types" tabindex="-1">标量类型(Scalar Types) <a class="header-anchor" href="#标量类型-scalar-types" aria-label="Permalink to &quot;标量类型(Scalar Types)&quot;">​</a></h2><p>Rust 有四种基本的标量类型：</p><ul><li>整型(<strong>integers</strong>)</li><li>浮点型(<strong>floating-point numbers</strong>)</li><li>布尔类型(<strong>Booleans</strong>)</li><li>字符类型(<strong>characters</strong>)</li></ul><h3 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h3><table><thead><tr><th>长度</th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8-bit</td><td>i8</td><td>u8</td></tr><tr><td>16-bit</td><td>i16</td><td>u16</td></tr><tr><td>32-bit</td><td>i32</td><td>u32</td></tr><tr><td>64-bit</td><td>i64</td><td>u64</td></tr><tr><td>128-bit</td><td>i128</td><td>u128</td></tr><tr><td>arch</td><td>isize</td><td>usize</td></tr></tbody></table><ul><li>有符号数以<strong>补码形式</strong>存储</li><li>有符号的变量可以储存包含从 - ($2^{n-1}$) 到 ($2^{n-1}$) - 1 在内的数字;</li><li>无符号的变量可以储存包含从 0 到 $2^n$ - 1 在内的数字;</li><li>isize 和 usize 类型依赖运行程序的计算机架构, 主要作为某些集合的索引</li></ul><table><thead><tr><th>数字字面值</th><th>例子</th></tr></thead><tbody><tr><td>Decimal (十进制)</td><td>1_000_000</td></tr><tr><td>Hex (十六进制)</td><td>0xff</td></tr><tr><td>Octal (八进制)</td><td>0o77</td></tr><tr><td>Binary (二进制)</td><td>0b1111_0000</td></tr><tr><td>Byte (单字节字符)(仅限于 u8)</td><td>b&#39;A&#39;</td></tr></tbody></table><h3 id="浮点型" tabindex="-1">浮点型 <a class="header-anchor" href="#浮点型" aria-label="Permalink to &quot;浮点型&quot;">​</a></h3><ul><li>浮点数类型是 f32 和 f64，分别占 32 位和 64 位。默认类型是 f64</li><li>所有的浮点型都是有符号的。</li><li>浮点数采用 IEEE-754 标准表示。f32 是单精度浮点数，f64 是双精度浮点数</li></ul><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // f64</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // f32</span></span>
<span class="line"><span style="color:#6A737D;">// 这是 Rust 里面值类型显式标记的语法，规定为value+type的形式</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.0</span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // f32</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> z1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.0_</span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // f32</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 as 关键字，Rust 使数字类型转换非常容易</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">u64</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // f64</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // f32</span></span>
<span class="line"><span style="color:#6A737D;">// 这是 Rust 里面值类型显式标记的语法，规定为value+type的形式</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.0</span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // f32</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> z1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.0_</span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // f32</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 as 关键字，Rust 使数字类型转换非常容易</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u64</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="布尔型" tabindex="-1">布尔型 <a class="header-anchor" href="#布尔型" aria-label="Permalink to &quot;布尔型&quot;">​</a></h3><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> f</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> f</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="字符类型-characters" tabindex="-1">字符类型 (characters) <a class="header-anchor" href="#字符类型-characters" aria-label="Permalink to &quot;字符类型 (characters)&quot;">​</a></h3><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;z&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> z</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ℤ&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> heart_eyed_cat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;😻&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;z&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> z</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ℤ&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> heart_eyed_cat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;😻&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><ul><li>单引号声明 <strong>char</strong> 字面量</li><li>Rust 的 <strong>char</strong> 类型的大小为四个字节 (four bytes)</li><li>是 Unicode 标量值（Unicode Scalar Value），可以比 ASCII 表示更多内容。在 Rust 中，带变音符号的字母（Accented letters），中文、日文、韩文等字符，emoji（绘文字）以及零长度的空白字符都是有效的 char 值。</li><li>Unicode 标量值包含: <ul><li>U+0000 到 U+D7FF</li><li>U+E000 到 U+10FFFF</li></ul></li><li>“character” 并不是一个 Unicode 中的概念，所以人直觉上的 “字符” 可能与 Rust 中的 char 并不符合。</li></ul><h2 id="复合类型-compound-types" tabindex="-1">复合类型(Compound types) <a class="header-anchor" href="#复合类型-compound-types" aria-label="Permalink to &quot;复合类型(Compound types)&quot;">​</a></h2><p>Rust 有两个原生的复合类型：</p><ul><li>元组（tuple）</li><li>数组（array）</li></ul><h3 id="元组类型" tabindex="-1">元组类型 <a class="header-anchor" href="#元组类型" aria-label="Permalink to &quot;元组类型&quot;">​</a></h3><ul><li>元组是一个将多个其他类型的值组合进一个复合类型的主要方式。</li><li>元组长度固定：一旦声明，其长度不会增大或缩小。</li></ul><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 使用包含在圆括号中的逗号分隔的值列表来创建一个元组。</span></span>
<span class="line"><span style="color:#6A737D;">// 元组中的每一个位置都有一个类型，而且这些不同值的类型也不必是相同的。</span></span>
<span class="line"><span style="color:#6A737D;">// 这个例子中使用了可选的类型注解：</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tup</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">f64</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">u8</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6.4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// tup 变量绑定到整个元组上，因为元组是一个单独的复合元素。</span></span>
<span class="line"><span style="color:#6A737D;">// 为了从元组中获取单个值，可以使用模式匹配（pattern matching）来解构（destructure）元组值，像这样：</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (x, y, z) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tup;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 也可以使用点号（.）后跟值的索引来直接访问它们。例如：</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> five_hundred </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> six_point_four </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> one </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用包含在圆括号中的逗号分隔的值列表来创建一个元组。</span></span>
<span class="line"><span style="color:#6A737D;">// 元组中的每一个位置都有一个类型，而且这些不同值的类型也不必是相同的。</span></span>
<span class="line"><span style="color:#6A737D;">// 这个例子中使用了可选的类型注解：</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tup</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">f64</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">u8</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6.4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// tup 变量绑定到整个元组上，因为元组是一个单独的复合元素。</span></span>
<span class="line"><span style="color:#6A737D;">// 为了从元组中获取单个值，可以使用模式匹配（pattern matching）来解构（destructure）元组值，像这样：</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> (x, y, z) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tup;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 也可以使用点号（.）后跟值的索引来直接访问它们。例如：</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> five_hundred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> six_point_four </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> one </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span></code></pre></div><p>不带任何值的元组有个特殊的名称，叫做 单元（unit） 元组。这种值以及对应的类型都写作 ()，表示空值或空的返回类型。如果表达式不返回任何其他值，则会隐式返回单元值。</p><h3 id="数组类型" tabindex="-1">数组类型 <a class="header-anchor" href="#数组类型" aria-label="Permalink to &quot;数组类型&quot;">​</a></h3><p>另一个包含多个值的方式是 数组（array）。与元组不同，数组中的每个元素的类型必须相同。Rust 中的数组与一些其他语言中的数组不同，Rust 中的数组长度是固定的。</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span></code></pre></div><ul><li>当想要在栈（stack）而不是在堆（heap）上为数据分配空间，或者是想要确保总是有固定数量的元素时，数组非常有用。</li><li>但是数组并不如 <strong>vector</strong> 类型灵活。<strong>vector</strong> 类型是标准库提供的一个 允许 增长和缩小长度的类似数组的集合类型。当不确定是应该使用数组还是 <strong>vector</strong> 的时候，那么很可能应该使用 <strong>vector</strong>。</li></ul><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 当确定元素个数不会改变时，数组会更有用。例如，当在一个程序中使用月份名字时，更应趋向于使用数组而不是 vector，因为确定只会有 12 个元素。</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> months </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;January&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;February&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;March&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;April&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;May&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;June&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;July&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;August&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;September&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;October&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;November&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;December&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 可以像这样编写数组的类型：在方括号中包含每个元素的类型，后跟分号，再后跟数组元素的数量。</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">; </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 还可以通过在方括号中指定初始值加分号再加元素个数的方式来创建一个每个元素都为相同值的数组</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 这种写法与 let b = [3, 3, 3, 3, 3]; 效果相同，但更简洁</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 当确定元素个数不会改变时，数组会更有用。例如，当在一个程序中使用月份名字时，更应趋向于使用数组而不是 vector，因为确定只会有 12 个元素。</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> months </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;January&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;February&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;March&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;April&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;May&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;June&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;July&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;August&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;September&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;October&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;November&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;December&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 可以像这样编写数组的类型：在方括号中包含每个元素的类型，后跟分号，再后跟数组元素的数量。</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">; </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 还可以通过在方括号中指定初始值加分号再加元素个数的方式来创建一个每个元素都为相同值的数组</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 这种写法与 let b = [3, 3, 3, 3, 3]; 效果相同，但更简洁</span></span></code></pre></div><h4 id="访问数组元素" tabindex="-1">访问数组元素 <a class="header-anchor" href="#访问数组元素" aria-label="Permalink to &quot;访问数组元素&quot;">​</a></h4><ul><li>数组是可以在栈 (stack) 上分配的已知固定大小的单个内存块。</li><li>可以使用索引来访问数组的元素</li><li>如果索引超出了数组长度，Rust 不会允许其继续访问相应的内存地址。Rust 会 panic</li></ul><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> first </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> months[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> second </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> months[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> unknow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> months[</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;"> // 报错out of bounds</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> months[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> second </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> months[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> unknow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> months[</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // 报错out of bounds</span></span></code></pre></div><h3 id="切片-slice-在运行时已知长度的相同元素的集合" tabindex="-1">切片（slice） - 在运行时已知长度的相同元素的集合 <a class="header-anchor" href="#切片-slice-在运行时已知长度的相同元素的集合" aria-label="Permalink to &quot;切片（slice） - 在运行时已知长度的相同元素的集合&quot;">​</a></h3><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">; </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 数组切片</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">arr[</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;"> // [2, 3]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">arr[</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;"> // [1，2, 3]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">arr[</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;"> // [4, 5， 6]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">arr[</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;"> // [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> w</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 字符串切片</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> w1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">w[</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> w2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}&quot;</span><span style="color:#E1E4E8;">, w1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> w2);</span><span style="color:#6A737D;"> // true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">; </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 数组切片</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">arr[</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // [2, 3]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">arr[</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // [1，2, 3]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">arr[</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // [4, 5， 6]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">arr[</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> w</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 字符串切片</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> w1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">w[</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> w2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello, world!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{}&quot;</span><span style="color:#24292E;">, w1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> w2);</span><span style="color:#6A737D;"> // true</span></span></code></pre></div><h3 id="str-string-slice-在运行时已知长度的文本" tabindex="-1">str(string slice) - 在运行时已知长度的文本 <a class="header-anchor" href="#str-string-slice-在运行时已知长度的文本" aria-label="Permalink to &quot;str(string slice) - 在运行时已知长度的文本&quot;">​</a></h3><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello, world!&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="结构体-struct" tabindex="-1">结构体 (struct) <a class="header-anchor" href="#结构体-struct" aria-label="Permalink to &quot;结构体 (struct)&quot;">​</a></h2><p>一个 struct 就是一些字段的集合。 字段是一个与数据结构相关联的数据值。它的值可以是基本类型或结构体类型。 它的定义就像给编译器的蓝图，告诉编译器如何在内存中布局彼此相邻的字段。</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    username</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    email</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">u8</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> user1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    username</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user1&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    email</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user1@email.com&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> user2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    email</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;another@example.com&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">user1</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    username</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    email</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u8</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> user1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    username</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user1&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    email</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user1@email.com&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> user2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    email</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;another@example.com&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">..</span><span style="color:#24292E;">user1</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,38),e=[o];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{d as __pageData,h as default};
