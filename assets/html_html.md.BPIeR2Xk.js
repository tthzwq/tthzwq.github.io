import{_ as e,c as t,o as a,a4 as r}from"./chunks/framework.IXvbZIHp.js";const f=JSON.parse('{"title":"HTML","description":"","frontmatter":{},"headers":[],"relativePath":"html/html.md","filePath":"html/html.md","lastUpdated":1710775876000}'),s={name:"html/html.md"},c=r('<h1 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h1><h3 id="_1-script-标签中-defer-和-async-的区别" tabindex="-1">1. script 标签中 defer 和 async 的区别？ <a class="header-anchor" href="#_1-script-标签中-defer-和-async-的区别" aria-label="Permalink to &quot;1. script 标签中 defer 和 async 的区别？&quot;">​</a></h3><ul><li><code>async</code> 当浏览器遇到带有 async 属性的 script 时，请求该脚本的网络请求是异步的，不会阻塞浏览器解析 HTML，一旦网络请求回来之后，如果此时 HTML 还没有解析完，浏览器会暂停解析，先让 JS 引擎执行代码，执行完毕后再进行解析。<strong>多个 async 之间的执行顺序是确定的，完全依赖于网络传输结果，谁先到执行谁。</strong></li><li><code>defer</code> 当浏览器遇到带有 defer 属性的 script 时，获取该脚本的网络请求也是异步的，不会阻塞浏览器解析 HTML，一旦网络请求回来之后，如果此时 HTML 还没有解析完，浏览器不会暂停解析并执行 JS 代码，而是等待 HTML 解析完毕再执行 JS 代码。 <strong>如果存在多个 defer script 标签，浏览器（IE9 及以下除外）会保证它们按照在 HTML 中出现的顺序执行，不会破坏 JS 脚本之间的依赖关系。</strong></li></ul>',3),o=[c];function n(l,d,i,_,h,m){return a(),t("div",null,o)}const T=e(s,[["render",n]]);export{f as __pageData,T as default};
